{"ast":null,"code":"var _jsxFileName = \"/Users/Lucy/PROYECTOS/dao-starter/buildspace-dao-starter/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { useEffect, useMemo, useState } from \"react\"; // import thirdweb\n\nimport { useWeb3 } from \"@3rdweb/hooks\"; // We instatiate the sdk on Rinkeby.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\"); // We can grab a reference to our ERC-1155 contract.\n\nconst bundleDropModule = sdk.getBundleDropModule(\"INSERT_BUNDLE_DROP_ADDRESS\");\n\nconst App = () => {\n  _s();\n\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"ðŸ‘‹ Address:\", address); // State variable for us to know if user has our NFT.\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  useEffect(() => {\n    // If they don't have an connected wallet, exit!\n    if (!address) {\n      return;\n    } // Check if the user has the NFT by using bundleDropModule.balanceOf\n\n\n    return bundleDropModule.balanceOf(address, \"0\").then(balance => {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"ðŸŒŸ this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\");\n      }\n    }).catch(error => {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    });\n  }, [address]); // ... include all your other code that was alread there below.\n  // This is the case where the user hasn't connected their wallet\n  // to your web app. Let them call connectWallet.\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to DOGGIE_DAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  } // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC40 wallet connected, now what!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"hD1U+Ir37Qwd90vA80Pp0/qkVrw=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Lucy/PROYECTOS/dao-starter/buildspace-dao-starter/src/App.jsx"],"names":["ThirdwebSDK","useEffect","useMemo","useState","useWeb3","sdk","bundleDropModule","getBundleDropModule","App","connectWallet","address","error","provider","console","log","hasClaimedNFT","setHasClaimedNFT","balanceOf","then","balance","gt","catch"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,eAAxB,C,CAEA;;;AACA,MAAMC,GAAG,GAAG,IAAIL,WAAJ,CAAgB,SAAhB,CAAZ,C,CAEA;;AACA,MAAMM,gBAAgB,GAAGD,GAAG,CAACE,mBAAJ,CACvB,4BADuB,CAAzB;;AAIA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAA8CR,OAAO,EAA3D;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,OAA3B,EAFgB,CAIhB;;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,KAAD,CAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACS,OAAL,EAAc;AACZ;AACD,KAJa,CAMd;;;AACA,WAAOJ,gBAAgB,CACpBW,SADI,CACMP,OADN,EACe,GADf,EAEJQ,IAFI,CAEEC,OAAD,IAAa;AACjB;AACA,UAAIA,OAAO,CAACC,EAAR,CAAW,CAAX,CAAJ,EAAmB;AACjBJ,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,OAHD,MAGO;AACLE,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD;AACF,KAXI,EAYJO,KAZI,CAYGV,KAAD,IAAW;AAChBK,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAH,MAAAA,OAAO,CAACF,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACD,KAfI,CAAP;AAgBD,GAvBQ,EAuBN,CAACD,OAAD,CAvBM,CAAT,CAPgB,CAgChB;AAIA;AACA;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,UAAD,CAApC;AAAkD,QAAA,SAAS,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GA/Ce,CAiDhB;AACA;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAID,CAvDD;;GAAMD,G;UACgDJ,O;;;KADhDI,G;AAyDN,eAAeA,GAAf","sourcesContent":["import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\nimport { useEffect, useMemo, useState } from \"react\";\n\n// import thirdweb\nimport { useWeb3 } from \"@3rdweb/hooks\";\n\n// We instatiate the sdk on Rinkeby.\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\n// We can grab a reference to our ERC-1155 contract.\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"INSERT_BUNDLE_DROP_ADDRESS\",\n);\n\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"ðŸ‘‹ Address:\", address)\n\n  // State variable for us to know if user has our NFT.\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n  useEffect(() => {\n    // If they don't have an connected wallet, exit!\n    if (!address) {\n      return;\n    }\n    \n    // Check if the user has the NFT by using bundleDropModule.balanceOf\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        // If balance is greater than 0, they have our NFT!\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"ðŸŒŸ this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  // ... include all your other code that was alread there below.\n\n\n\n  // This is the case where the user hasn't connected their wallet\n  // to your web app. Let them call connectWallet.\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to DOGGIE_DAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  \n  // This is the case where we have the user's address\n  // which means they've connected their wallet to our site!\n  return (\n    <div className=\"landing\">\n      <h1>ðŸ‘€ wallet connected, now what!</h1>\n    </div>);\n};\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}